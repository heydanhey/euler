
require 'minitest/autorun'
require_relative 'Euler'

class EulerTest < Minitest::Test
  def test_001_sample_ten
    assert_equal 23, Euler.sum_of_multiples_three_and_five(10)
  end

  def test_001_final
    assert_equal 233168, Euler.sum_of_multiples_three_and_five(1000)
  end

  def test_002_sample_twenty_one
    assert_equal 10, Euler.sum_fibonacci_evens(21)
  end

  def test_002_sample_final
    assert_equal 4613732, Euler.sum_fibonacci_evens(4000000)
  end

  def test_005_sample
    assert_equal 2520, Euler.smallest_multiple(10)
  end

  def test_005_final
    skip
    assert_equal 232792560, Euler.smallest_multiple(20)
  end

  def test_is_prime
    assert_equal true, Euler.is_prime(13)
    assert_equal true, Euler.is_prime(11)
    assert_equal false, Euler.is_prime(10)
  end

  def test_007_sample
    assert_equal 13, Euler.count_primes(6)
  end

  def test_007_final
    skip
    assert_equal 104743, Euler.count_primes(10001)
  end

  def test_008_sample
    sample =
      7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
    assert_equal 5832, Euler.product_in_a_series(sample, 4)
  end

  def test_008_final
    sample =
      7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
    assert_equal 23514624000, Euler.product_in_a_series(sample, 13)
  end

  def test_pythagorean_triplet
    a = 3
    b = 4
    c = 5
    assert(Euler.pythagorean_triplet?(a, b, c))
  end

  def test_find_pythagorean_triplet_sum
    assert_equal([200, 375, 425], Euler.find_pythagorean_triplet_sum(1000))
  end



end